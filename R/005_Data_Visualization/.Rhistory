choose(5, 2)
#6. Possible Subsets: Number of possible subsets of size k, choosen
#from a set of size n
choose(2, 2)
#6. Possible Subsets: Number of possible subsets of size k, choosen
#from a set of size n
choose(5,2)
a <- c(1,2)
b <- c(1,2,3,4)
setequal(a,b)
setequal(b,a)
c <- intersect(a,b)
setequal(c,b)
setequal(c,a)
all(c %in% b)
all(c %in% a)
#6. Subset: Find if a is subset of b
a <- c(1,2)
b <- c(1,2,3,4)
all(intersect(a,b) %in% b)
#6. Subset: Find if a is subset of b
a <- c(1,5)
b <- c(1,2,3,4)
all(intersect(a,b) %in% b)
all(a %in% b)
#6. Subset: Find if a is subset of b
all(x %in% y)
#6. Subset: Find if a is subset of b
all(x %in% y)
a <- c(1,5)
b <- c(1,2,3,4,5,6)
all(a %in% b)
a <- c(1,5)
b <- c(1,2,3,4,5,6)
all(a %in% b)
#--------------------- Examples ----------------------------
#If A = {4, 6, 8, 10, 12} B = {8, 10, 12, 14} C = {12, 14, 16} D = {16, 18},
#find the following:
a <- c(4, 6, 8, 10, 12)
b <- c(8, 10, 12, 14)
c <- c(12, 14, 16)
d <- c(16, 18)
#Find the following:
#1. A intersection B:
intersect(a,b)
#2. B intersect C:
intersect(b,c)
#3. A intersect (c intersect b)
intersect(a, intersect(a,b))
#3. A intersect (c intersect d)
intersect(a, intersect(c,d))
#4. a intersect c
intersect(a,c)
#5. b intersect d
intersect(b,d)
#6. (a intersection b) union c
union(c, intersect(a,b))
#7. a intersection (b union d)
intersect(a, union(b,d))
#8. (a intersection b) union (b intersection c)
union(intersect(a,b), intersect(b,c))
#9. (a union d) intersect (b union c)
intersect(union(a,d), union(b,c))
#10. Is d subset of c
all(d in c)
#10. Is d subset of c
all(d %in% c)
#10. Is d subset of c
all(d %in% c(16,18,22))
#Important Note: If you are checking for subset, you can use all() to find
#subset in set. However if you want to check wheter a vector (not set) is a
#subvector (or kind of subset) of any other vector, then you should use isin()
#as all() function doesnot give correct result for repeated elements in vector.
#Note that I say repeated values in 'vector' and not in 'set' as set does not
#deal with repreated values in it
#e.g.
x <- 1:10
y <- c(3,3,7)
all(y %in% x)
#elements
isin(x,y)
install.packages('isin')
install.packages('prob')
library(prob)
#elements
#isin() is from package 'prob'
isin(x,y)
interaction.plot(factor(mtcars$cyl), mtcars$mpg, mtcars$hp)
combn(6,2)
choose(6,2)
sample(6,2)
library(prob)
nsamp(6,2)
nsamp(6,2, ordered = TRUE)
#================ Combinations & Permutations =====================
#---- Combinatorics---------
#Following R functions can be used to get combinations in R
#1. choose()
choose(6,2)
nsamp(6,2, ordered = TRUE)
nsamp(6,2)
#---- Permutations ----------
#Following are the functions to get permutations in R:
#1. No inbuilt function in R by default. So creating one:
permn(6)
#---- Permutations ----------
#Following are the functions to get permutations in R:
#1. No inbuilt function in R by default. So creating one:
permsn(6)
#---- Permutations ----------
#Following are the functions to get permutations in R:
#1. No inbuilt function in R by default. So creating one:
permsn(6,2)
#---- Permutations ----------
#Following are the functions to get permutations in R:
#1. No inbuilt function in R by default. So creating one:
combn(6,2)
#---- Permutations ----------
#Following are the functions to get permutations in R:
#1. No inbuilt function in R by default. So creating one:
permutate <- function(n,k){choose(n,k) * factorial(k)}
permutate(6,2)
nsamp(6,2)
#1. If one card is drawn at random from the pack of 52,
# what is the probability of picking a black card ?
#Sol:
# Probability = (Sum of observations)/(Total Possibility)
# Sum of observation = 1 black card
# Total Possibility = 13 black cards + 13 black cards = 26 black cards
probab = 1/26
probab
x <- c(1,2,5)
y <- c(5,1,8,9)
union(x,y)
intersect(x,y)
setdiff(x,y)
setdiff(y,x)
setequal(x,y)
choose(6,2)
# Run it using
library(dplyr)
summary(mtcars)
dim(mtcars)
View(mtcars)
filter(mtcars, cyl==6)
filter(mtcars, cyl==6, gear ==4)
slice(mtcars, 1:10)
slice(mtcars, c(1,3,6))
arrange(mtcars, hp)
select(mtcars, hp)
arrange(mtcars, hp, mpg)
head(rename(mtcars, new_hp=hp))
distinct(mtcars)
discoveries
distinct(select(mtcars, hp))
head(mutate(mtcars, Performace = hp/mpg))
mtcars
transmute(mtcars, Performance=hp/mpg)
summarise(mtcars, avg=mean(hp))
summarise(mtcars, avg_hp = group_by(hp))
sample_n(mtcars, 20)
sample_n(mtcars, 2)
sample_n(mtcars, 255)
sample_frac(mtcars, 0.23)
x <- "HELLLO"
View(iris)
iris %>% group_by(Species)
View(iris %>% group_by(Species))
iris %>% group_by(Species) %>% summarise(mean1 = mean(Sepal.Length))
iris %>% group_by(Species) %>% summarise(mean1 = mean(Sepal.Length), max1 = max(Sepal.Length))
# Create a vector
v <- c(1,2,3,4,5)
# Create a matrix
m <- matrix(1:10,nrow=2)
# Create a data frame
df <- women
v
m
df
#Using list()
#We can use the list() to combine all the data structures:
li <- list(v,m,df)
li
head(li)
li <- list(sample_vec = v,sample_mat = m, sample_df = df)
li
li[0]
li[[0]]
# Single brackets
li[1] # By index
# By name
li['sample_vec']
# By name
li['sample_vec']
class(li['sample_vec'])
class(li[1])
class(li[[1]])
is.vector(li[[1]])
class(li[['sample_vec']])
is.vector(li[['sample_vec']])
li$sample_vec
class(li$sample_vec)
li$sample_vec[1]
# By name
li['sample_vec'][2]
# By name
li['sample_vec'][1]
# By name
li['sample_vec'][1][1]
li[['sample_vec']][1]
a <- list ("x"=5, "y"=10, "z"=15)
sum(unlist(a))
library(prob)
tosscoin(10)
tosscoin(1)
tosscoin(2)
tosscoin(3)
tosscoin(4)
tosscoin(3)
rolldie(1)
rolldie(2)
tosscoin(1)
rolldie(1)
S <- tosscoin(s)
S
S <- tosscoin(2)
s
S
S <- tosscoin(2, markspace = TRUE)
S <- tosscoin(2, makespace = TRUE)
S
S <- rolldie(1, makespace = T)
S
S <- rolldie(2, makespace = T)
S
S <- rolldie(3, makespace = T)
S
S <- rolldie(1, makespace = T)
S
sample(5, 20, replace = T)
sample(c("H","T"),
size = 1000, replace = TRUE)
sample(6, size = 3000, replace
= TRUE)
sample(6, size = 3, replace
= TRUE)
sample(6, size = 4, replace
= TRUE)
v1 <- 1:12
v2 <- c(0.03,0.06,0.08,0.11,0.14,0.17,0.14,0.11,0.08,0.06,0.03)
plot(v1,v2)
plot(v1,v2,type="h",xlim=c(-1,2),ylim=c(0,1))
plot(v1,v2,type="h",xlim=c(1,12),ylim=c(0,1))
v1
v2
v1 <- 2:12
plot(v1,v2,type="h",xlim=c(1,12),ylim=c(0,1))
plot(v1,v2,type="h",xlim=c(1,12),ylim=c(0,0.2))
plot(v1,v2,type="h",xlim=c(1,12),ylim=c(0,0.2), lwd=2,col="blue",ylab="p")
plot(v1,v2,type="h",xlim=c(1,12),ylim=c(0,0.2), lwd=2,col="blue",ylab="Probability", xlab='Distribution')
S <- rolldie(1, makespace = T)
S
S$X1
plot(v1,v2,type="h",xlim=c(1,12),ylim=c(0,0.2), lwd=2,col="blue",ylab="Probability", xlab='Distribution')
View(S)
plot(S$X1, S$probs, type='h')
plot(v1,v2,type="h",ylim=c(0,0.2), lwd=2,col="blue",ylab="Probability", xlab='Distribution')
plot(v1,v2,type="h", lwd=2,col="blue",ylab="Probability", xlab='Distribution')
plot(v1,v2,type="h", lwd=5,col="blue",ylab="Probability", xlab='Distribution')
plot(S$X1, S$probs, type='h')
plot(S$X1, S$probs, type='h', lwd=5, col='blue', xlab='Distribution', ylab='Probability Distribution')
plot(S$X1, S$probs, type='h', lwd=5, col='blue', xlab='Distribution', ylab='Events')
plot(S$X1, S$probs, type='h', lwd=5, col='blue', xlab='Events', ylab='Probability')
x=seq(1,5,length=200)
x
y=rep(1,200)
y
plot(x,y,type="l",lwd=2,col="red",ylab="p")
plot(x,y,type="l",lwd=2,col="red",ylab="Probability", xlab='Dart thrown every 0.2 second')
polygon(c(1,x,5),c(0,y,0),col="lightgray",border=NA)
polygon(c(1,5),c(0,y,0),col="lightgray",border=NA)
polygon(c(1,5),c(0,0),col="lightgray",border=NA)
plot(x,y,type="l",lwd=2,col="red",ylab="Probability", xlab='Dart thrown every 0.2 second')
polygon(c(1,5),c(0,0),col="lightgray",border=NA)
polygon(c(1,x,5),c(0,y,0),col="lightgray",border=NA)
lines(x,y,type="l",lwd=2,col="red")
lines(x,y,type="l",lwd=2,col="red")
plot(x,y,type="l",lwd=2,col="red",ylab="Probability", xlab='Dart thrown every 0.2 second')
lines(x,y,type="l",lwd=2,col="red")
lines(x,y,type="h",lwd=2,col="red")
lines(x,y,type="d",lwd=2,col="red")
lines(x,y,type="-",lwd=2,col="red")
lines(x,y,type="l",lwd=2,col="red")
plot(x,y,type="l",lwd=2,col="red",ylab="Probability", xlab='Dart thrown every 0.2 second')
polygon(c(1,y,5),c(0,x,0),col="lightgray",border=NA)
polygon(c(1,x,5),c(0,y,0),col="lightgray",border=NA)
plot(x,y,type="l",lwd=2,col="red",ylab="Probability", xlab='Dart thrown every 0.2 second')
polygon(c(1,x,5),c(0,y,0),col="lightblue",border=NA)
polygon(c(1,x,5),c(0,y,0),col="lightgray",border=NA)
x=seq(1,5,length=200)
y=rep(1,200)
plot(x,y,type="l",lwd=2,col="red",ylab="Probability", xlab='Dart thrown every 0.2 second')
polygon(c(1,x,5),c(0,y,0),col="lightgray",border=NA)
dbinom(4, 10, 0.5)
dbinom(4, 10)
dbinom(45, 100, 0.5)
dbinom(0:45, 100, 0.5)
sum(dbinom(0:45, 100, 0.5))
sum(dbinom(0:45, 100, 0.5))
dbinom(2,5,0.5)
dbinom(6,5,0.5)
dbinom(2,6^5,0.5)
dbinom(2,5,1/6)
sum(dbinom(0:45, 100, 0.5))
plot(dbinom(0:45, 100, 0.5))
>plot(0:10,dbinom(0:10, 10, 0.5))
plot(0:10,dbinom(0:10, 10, 0.5))
plot(dbinom(0:100, 100, 0.5))
sum(dbinom(0:100, 100, 0.5))
plot(dbinom(0:45, 100, 0.5))
plot(dbinom(0:45, 100, 0.5,pch=4,col=2))
plot(dbinom(0:45, 100, 0.5),pch=4,col=2))
plot(dbinom(0:45, 100, 0.5),pch=4,col=2)
plot(dbinom(0:45, 100, 0.5),pch=4,col=4)
plot(dbinom(0:45, 100, 0.5),pch=4,col=2)
plot(dbinom(0:45, 100, 0.5),pch=5,col=2)
plot(dbinom(0:45, 100, 0.5),pch=3,col=2)
plot(dbinom(0:45, 100, 0.5),pch=4,col=2)
plot(dbinom(0:45, 100, 0.5),pch=4,col=2, xlab='Sample Space', ylab='Probabilities')
sum(dbinom(0:100, 100, 0.5))
plot(dbinom(0:100, 100, 0.5),pch=4,col=2, xlab='Sample Space', ylab='Probabilities')
p=dbinom(0:100, 100, 0.5)
barplot(p,xlim=c(0,12),ylim=c(0,0.25),col=”green”)
p=dbinom(0:100, 100, 0.5)
barplot(p,col=”green”)
lines(0:10,dbinom(0:10, 10, 0.5), col=3)
lines(0:10,dbinom(0:100, 100, 0.5), col=3)
lines(0:100,dbinom(0:100, 100, 0.5), col=3)
pbinom(0:45, 100, 0.5)
pbinom(45, 100, 0.5)
sum(dbinom(0:45, 100, 0.5))
x=c(0,1)
y=c(0.3,0.7)
plot(x,y,type="h",xlim=c(-1,2),ylim=c(0,1),lwd=2,col="blue",ylab="p")
7
x=c(0,1)
y=c(0.3,0.7)
plot(x,y,type="h",xlim=c(-1,2),ylim=c(0,1),lwd=7,col="blue",ylab="p")
x=c(0,1)
y=c(0.3,0.7)
plot(x,y,type="h",ylim=c(0,1),lwd=7,col="blue",ylab="p")
x=c(0,1)
y=c(0.3,0.7)
plot(x,y,type="h",lwd=7,col="blue",ylab="p")
points(x,y,pch=16,cex=2,col="dark red")
x=c(0,1)
y=c(0.3,0.7)
plot(x,y,type="h",xlim=c(-1,2),ylim=c(0,1),lwd=7,col="blue",ylab="p")
x=c(0,1)
y=c(0.3,0.7)
plot(factor(x),y,type="h",xlim=c(-1,2),ylim=c(0,1),lwd=7,col="blue",ylab="p")
x=c(0,1)
y=c(0.3,0.7)
plot(factor(x),y,type="h",xlim=c(-1,2),ylim=c(0,1),lwd=2,col="blue",ylab="p")
x=c(0,1)
y=c(0.3,0.7)
plot(x,y,type="h",xlim=c(-1,2),ylim=c(0,1),lwd=7,col="blue",ylab="p")
points(x,y,pch=17,cex=2,col="dark red")
points(x,y,pch=15,cex=2,col="dark red")
points(x,y,pch=16,cex=2,col="dark red")
x=c(0,1)
y=c(0.3,0.7)
plot(x,y,type="h",xlim=c(-1,2),ylim=c(0,1),lwd=7,col="blue",ylab="p")
points(x,y,pch=16,cex=2,col="dark red")
x=c(0,1)
y=c(0.3,0.7)
plot(x,y,type="h",xlim=c(-1,2),ylim=c(0,1),lwd=5,col="blue",ylab="p")
points(x,y,pch=16,cex=2,col="dark red")
ppois(16, lambda = 12, lower=FALSE)
ppois(16, lambda = 12, lower.tail=FALSE)
plot(ppois(16, lambda = 12, lower.tail=FALSE))
plot(ppois(16:, lambda = 12, lower.tail=FALSE))
plot(ppois(16:20, lambda = 12, lower.tail=FALSE))
plot(dpois(16:20, lambda = 12, lower.tail=FALSE))
plot(dpois(16:20, lambda = 12))
dpois(16, 12)
plot(16:20, ppois(16:20, lambda = 12, lower.tail=FALSE))
plot(0:20, ppois(16:20, lambda = 12, lower.tail=FALSE))
plot(0:20, ppois(0:20, lambda = 12, lower.tail=FALSE))
plot(0:20, ppois(0:20, lambda = 12))
plot(0:20, dpois( x=0:20, lambda=6 ), xlim=c(-2,20))
normden <- function(x){dnorm(x, mean=6, sd=sqrt(6))}
curve(normden, from=-4, to=20, add=TRUE, col="red")
dpois( x=0:20, lambda=6 )
sum(dpois( x=0:20, lambda=6))
ppois(20, lambda = 18, lower=FALSE)
ppois(20, lambda = 18)
dpois(20, lambda = 18)
dpois(20, lambda = 18)
dpois(20, lambda = 18, log = T)
dpois(20, lambda = 18)
plot(pnorm(84, mean=72, sd=15.2, lower.tail=FALSE) )
plot(pnorm(0:84, mean=72, sd=15.2, lower.tail=FALSE) )
pnorm(1.96, 0, 1)
qnorm(0.975, 0, 1)
randomSet <- rnorm(1000,0,1)
randomSet
plot(randomSet)
hist(randomdeviates, main="Random draws from Std Normal", cex.axis=.8, xlim=c(-4,4))
hist(randomSet, main="Random draws from Std Normal", cex.axis=.8, xlim=c(-4,4))
plot(randomSet,type='h')
hist(randomSet, main="Random draws from Std Normal", cex.axis=.8, xlim=c(-4,4))
hist(randomSet, main="Random draws from Std Normal", cex.axis=.8, xlim=c(-4,4))
hist(randomSet, main="Random draws from Std Normal", cex.axis=.8)
hist(randomSet, main="Random draws from Std Normal", cex.axis=.8, xlim=c(-4,4))
hist(randomSet, main="Random draws from Std Normal", xlim=c(-4,4))
hist(randomSet, main="Random draws from Std Normal", cex.axis=.8, xlim=c(-4,4))
hist(randomSet, main="Random draws from Std Normal", xlim=c(-4,4))
hist(randomSet, main="Random draws from Std Normal", xlim=c(-4,4))
densities<-dnorm(xseq, 10,3)
xseq<-seq(-4,4,.01)
xseq
densities<-dnorm(xseq, 10,3)
plot(xseq, densities, col="darkgreen",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="PDF of Standard Normal", cex.axis=.8)
plot(xseq, densities, col="darkgreen",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="PDF of Standard Normal", cex.axis=.8, xlim=c(-9,19))
set.seed(3000)
xseq<-seq(-4,4,.01)
densities<-dnorm(xseq, 0,1)
cumulative<-pnorm(xseq, 0, 1)
randomdeviates<-rnorm(1000,0,1)
par(mfrow=c(1,3), mar=c(3,4,4,2))
plot(xseq, densities, col="darkgreen",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="PDF of Standard Normal", cex.axis=.8)
x = seq(-3, 3, 0.1)
plot(x = x, y = dnorm(x), type="l", bty="n")
plot(x = x, y = dnorm(x), type="l", bty="n", ylab='Probability Distribution')
View(B)
x = seq(-3, 3, 0.1)
plot(x = x, y = dnorm(x), type="l", bty="n", ylab='Probability Distribution')
plot(x = x, y = dnorm(x), type="l", bty="n", ylab='Probability Distribution')
z = seq(-3, 3, 0.1)
z
plot(z, pnorm(z), type="l")
library(prob)
tosscoin(1)
tosscoin(2)
tosscoin(3)
rolldie(3,6, makespace = T)
rolldie(1,6, makespace = T)
S <- rolldie(1, makespace = T)
S
plot(S$X1, S$probs, type='h')
plot(S$X1, S$probs, type='h', xlab='Events')
v1 <- 2:12
v2 <- c(0.03,0.06,0.08,0.11,0.13,0.17,0.13,0.11,0.08,0.06,0.03)
v1
v2
plot(v1, v2)
plot(v1, v2, type=h)
plot(v1, v2, type='h')
x = seq(1,5, length=200)
x
y = rep(1,200)
y
plot(x,y, type='l')
polygon(c(1,x,5),c(0,y,0), col='lightgray')
dbinom(2,5,0.5)
dbinom(0:45,100,0.5)
sumdbinom(0:45,100,0.5))
sum(dbinom(0:45,100,0.5))
pbinom(45,100,0.5)
plot(dbinom(0:45,100,0.5))
randomset <- rnorm(1000,0,1)
randomset
hist(randomset)
mean(randomset)
sd(randomset)
citation('data.table')
dt1 <- as.data.frame.table(mtcars)
dt1
head(dt1)
library(hflights)
View(hflights)
library(ggplot2)
setwd("D:/Marsian/Morning-Batch/R/005_Data_Visualization")
df <- read.csv('state_real_estate_data.csv')
df
head(df)
pl <- ggplot(df, aes(x=Home.Value))
pl <- ggplot(df, aes(x=Home.Value)) + geom_histogram()
print(pl1)
print(pl)
pl <- ggplot(df, aes(x=Home.Value)) + geom_histogram(color='red',alpha=0.5, fill='blue')
print(pl)
pl2 <- pl + xlab('HOmeValue in X') + ylab('Count') + ggtitle('House Value')
print(pl)
print(pl2)
pl <- ggplot(df, aes(x=Home.Value)) + geom_histogram(aes(fil=..count..))
pl2 <- pl + xlab('HOmeValue in X') + ylab('Count') + ggtitle('House Value')
print(pl2)
View(mpg)
citation('mpg')
pl <- ggplot(mpg, aes(class))
pl2 <- pl + geom_bar()
print(pl2)
pl2 <- pl + geom_bar(aes(fill=drv))
print(pl2)
pl2 <- pl + geom_bar(aes(fill=drv), position = 'fill')
print(pl2)
pl2 <- pl + geom_bar(aes(fill=drv), position = 'dodge')
print(pl2)
library(plotly)
ggplotly(pl2)
