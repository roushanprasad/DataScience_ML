#Regression Diagnostic URLs:
https://www.statsmodels.org/dev/examples/notebooks/generated/regression_diagnostics.html


def show_coefficients(regression_model, X_train, X_test, y_train, y_test):
    #For printing in colored font
    import colorama
    from colorama import Fore, Style
    #print(Fore.BLUE + "Hello World")
    #print(Style.RESET_ALL)
    
    #7. Checking the data types, exit if not proper types
    X_train_type = type(X_train)
    X_test_type = type(X_test)
    y_train_type = type(y_train)
    y_test_type = type(y_test)
    if ((X_train_type != pd.DataFrame) & (X_test_type != pd.DataFrame) & (y_train_type != pd.Series) & (y_test_type != pd.Series)):
        print(Fore.RED + '**** Please pass the data in expected format ****')
        print('You passed the data in the following format:')
        print('X_train type you passsed: ',X_train_type)
        print('X_test type you passsed: ',X_test_type)
        print('y_train type you passsed: ',y_train_type)
        print('y_test type you passsed: ',y_test_type)
        print(Fore.BLUE +'Expected Formats are: ')
        print('X_train type: ',pd.DataFrame)
        print('X_test type: ',pd.DataFrame)
        print('y_train type: ',pd.Series)
        print('y_test type: ',pd.Series)
        return 'Exiting Method'
 
    #1. Getting R SquaredAdjusted R-Squared
    print(Fore.BLUE + 'R Squared Score:')
    train_rsq = regression_model.score(X_train,y_train)
    test_rsq = regression_model.score(X_test,y_test)
    print(Fore.BLACK + 'R Squared Score (Train Model): ',train_rsq.round(5))
    print(Fore.BLACK + 'R Squared Score (Test Model): ',test_rsq.round(5))
    print(" ")
    
    #2. Getting Adjusted R Squared
    print(Fore.BLUE + 'Adjusted R Squared Score:')
    train_adrsq = 1 - (1 - train_rsq) * (X_train.shape[0]-1)/(X_train.shape[0] - X_train.shape[1] - 1)
    test_adrsq = 1 - (1 - test_rsq) * (X_test.shape[0]-1)/(X_test.shape[0] - X_test.shape[1] - 1)
    print(Fore.BLACK + 'Adjusted R Squared (Train Model):', train_adrsq.round(5))
    print(Fore.BLACK + 'Adjusted R Squared (Test Model):', test_adrsq.round(5))
    print(' ')
    
    #3. Getting Intercept
    print(Fore.BLUE + "Bias / Intercept: ")
    print(Fore.BLACK + "Intercept for the model: ",regression_model.intercept_.round(5))
    print(' ')
    
    #=========== Getting & Creating the coefficient & p-values matrix =====================
    #4. Getting Coefficients
    print(Fore.BLUE + "Weights / Coefficients: ")
    print(Style.RESET_ALL)
    coefs = regression_model.coef_
    coefs= coefs.reshape(-1,1)
    coefs_df = pd.DataFrame(data=coefs.round(5), index=X_test.columns, columns=['Coefficients'])
    
    #5. Getting p-values of features
    from sklearn.feature_selection import f_regression
    X_all = pd.concat([X_train, X_test])
    y_all = y_train.append(y_test)
    p_values = f_regression(X_all,y_all)[1] 
    
    #Tried adding round off to 5 digits for p-value but it is not wotking, hence commented
    #coefs_df = pd.concat([coefs_df,pd.DataFrame(p_values, index=X_test.columns, columns=['F-stat(p-value)']), 
                          #pd.DataFrame(p_values.round(5), index=X_test.columns, columns=['round(p-value)']) ], axis=1)
    coefs_df = pd.concat([coefs_df,pd.DataFrame(p_values, index=X_test.columns, columns=['F-stat(p-value)'])], axis=1)
    
    #6. Adding Significant Column
    sig = []
    for element in p_values:
        if element.round(5) < 0.05:
            sig.append('Yes')
        else:
            sig.append('No')
    coefs_df = pd.concat([coefs_df, pd.DataFrame(sig, columns=['Significant'], index=X_test.columns)], axis=1)
    print(coefs_df)
    print(' ')
    print("========================")
    #===================================================================================================================
