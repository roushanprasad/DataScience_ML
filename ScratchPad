#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import seaborn as sns


# In[7]:


from sklearn import datasets


# In[8]:


data = datasets.load_breast_cancer()


# In[32]:


X = pd.DataFrame(data = data['data'], columns=data['feature_names'])


# In[33]:


y = data['target']


# In[34]:


y


# In[35]:


X.head()


# In[36]:


from sklearn.preprocessing import StandardScaler


# In[37]:


scalar = StandardScaler()


# In[38]:


X = scalar.fit_transform(X)


# In[39]:


from sklearn.model_selection import train_test_split


# In[40]:


X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=101)


# In[41]:


from sklearn.linear_model import LogisticRegression


# In[42]:


log_reg = LogisticRegression()


# In[43]:


log_reg.fit(X_train, y_train)


# In[45]:


y_pred1 = log_reg.predict(X_test)


# In[132]:


print(metrics.classification_report(y_test, y_pred1))


# In[46]:


from sklearn import metrics


# In[48]:


fpr, tpr, thr = metrics.roc_curve(y_test, y_pred1)


# In[60]:


auc_score = metrics.roc_auc_score(y_test, y_pred1)


# In[53]:


#roc_auc = metrics.auc(fpr, tpr)


# In[61]:


auc_score


# In[62]:


plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % auc_score)
plt.legend(loc = 'lower right')
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')


# # Using SVM

# In[63]:


from sklearn.svm import SVC


# In[66]:


svc_reg = SVC(C=10, gamma=0.01)


# In[67]:


svc_reg.fit(X_train, y_train)


# In[68]:


y_pred2 = svc_reg.predict(X_test)


# In[133]:


print(metrics.classification_report(y_test, y_pred2))


# In[72]:


fpr2, tpr2, thr2 = metrics.roc_curve(y_test, y_pred2)


# In[73]:


auc_score2 = metrics.roc_auc_score(y_test, y_pred2)


# In[76]:


auc_score2


# In[93]:


plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b', label = 'Logistic AUC = %0.2f' % auc_score)
plt.plot(fpr2, tpr2, 'b', label = 'SVM AUC = %0.2f' % auc_score2, color='green')
plt.legend(loc = 'lower right')
plt.plot([0, 1], [0, 1],'r--')


# In[77]:


from sklearn.model_selection import GridSearchCV


# In[101]:


grid_params = {'C':[1,10,100,1000],'gamma':[0.1,0.01,0.001,0.0001], 'kernel':['rbf','poly'],'degree':[3,4,5,6,7]}


# In[102]:


gs_reg = GridSearchCV(svc_reg, grid_params, verbose= 3)


# In[103]:


gs_reg.fit(X_train, y_train)


# In[104]:


gs_reg.get_params


# In[105]:


gs_reg.best_params_


# In[107]:


gs_reg.best_estimator_


# In[108]:


#Initialing another SVM regresssor with best parameters and checking the auc roc


# In[109]:


svm_reg3 = SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,
  decision_function_shape='ovr', degree=3, gamma=0.0001, kernel='rbf',
  max_iter=-1, probability=False, random_state=None, shrinking=True,
  tol=0.001, verbose=False)


# In[120]:


#svm_reg3.fit(X_train, y_train)
svm_reg3.fit(X_train, y_train)


# In[121]:


#pred = svm_reg3.predict(X_test)


# In[124]:


#metrics.roc_auc_score(y_test, pred)


# In[126]:


y_pred3 = svm_reg3.predict(X_test)


# In[134]:


print(metrics.classification_report(y_test, y_pred3))


# In[127]:


fpr3, tpr3, thr3 = metrics.roc_curve(y_test, y_pred3)


# In[128]:


auc_score3 = metrics.roc_auc_score(y_test, y_pred3)


# In[129]:


auc_score3


# In[131]:


plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b', label = 'Logistic AUC = %0.2f' % auc_score)
plt.plot(fpr2, tpr2, 'b', label = 'SVM AUC = %0.2f' % auc_score2, color='green')
plt.plot(fpr3, tpr3, 'b', label = 'Optimised SVM AUC = %0.2f' % auc_score3, color='red')
plt.legend(loc = 'lower right')
plt.plot([0, 1], [0, 1],'r--')
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')

#plt.xlim([0, 1])
#plt.ylim([0, 1])

